syntax = "proto3";

package co.topl.proto.quivr;

import "common/box.proto";
import "common/verification_key.proto";

// Captures the logic/script/contract that must be satisfied in order to spend a particular Box
message Proposition {
  oneof sealed_value {
    PropositionPermanentlyLocked permanentlyLocked = 1;

    PropositionSignatureCurve25519 signatureCurve25519 = 3;
    PropositionSignatureEd25519 signatureEd25519 = 4;
    PropositionSignatureExtendedEd25519 signatureExtendedEd25519 = 5;

    PropositionKnowledgeHashLock signatureHashLock = 6;

    PropositionCompositionalThreshold compositionalThreshold = 7;
    PropositionCompositionalAnd compositionalAnd = 8;
    PropositionCompositionalOr compositionalOr = 9;
    PropositionCompositionalNot compositionalNot = 10;

    PropositionContextualHeightLock contextualHeightLock = 11;
    PropositionContextualRequiredTransactionIO contextualTransactionIO = 12;
  }
}

// A Proposition that can't be satisfied
message PropositionPermanentlyLocked {}

// A Proposition that can be satisfied by proving signature of a secret key corresponding to the provided Curve25519 verification key
// @deprecated
message PropositionSignatureCurve25519 {
  co.topl.proto.common.VerificationKeyCurve25519 key = 1;
}

// A Proposition that can be satisfied by proving signature of a secret key corresponding to the provided Ed25519 verification key
message PropositionSignatureEd25519 {
  co.topl.proto.common.VerificationKeyEd25519 key = 1;
}

// A Proposition that can be satisfied by proving signature of a secret key corresponding to the provided ExtendedEd25519 verification key
message PropositionSignatureExtendedEd25519 {
  co.topl.proto.common.VerificationKeyExtendedEd25519 key = 1;
}

// A Proposition that can be satisfied by signature of data that can be hashed to the provided digest.
// At this time, only 32-byte blake2b256 is supported.
message PropositionKnowledgeHashLock {
  // The hashed value.  Must be 32-bytes.
  bytes valueDigest = 1;
}

// A Proposition that can be satisfied by satisfying a minimum number of sub-propositions.
message PropositionCompositionalThreshold {
  // The minimum number of sub-propositions that must be satisfied
  uint32 threshold = 1;
  // The *set* of available sub-propositions that can be satisfied.  Propositions must be distinct.
  repeated Proposition propositions = 2;
}

// A Proposition that can be satisfied if both sub-propositions are satisfied.
message PropositionCompositionalAnd {
  // Proposition A
  Proposition a = 1;
  // Proposition B
  Proposition b = 2;
}

// A Proposition that can be satisfied if either of the sub-propositions are satisfied.
message PropositionCompositionalOr {
  // Proposition A
  Proposition a = 1;
  // Proposition B
  Proposition b = 2;
}

// A Proposition that can only be satisfied if the sub-proposition verifies to "false".
message PropositionCompositionalNot {
  // The sub-proposition
  Proposition a = 1;
}

// A Proposition that can only be satisfied once the height of the blockchain reaches a certain value
message PropositionContextualHeightLock {
  // The required minimum height of the blockchain
  uint64 height = 1;
}

// A Proposition that can be satisfied if the spending Transaction abides by a certain structure and contains certain values
message PropositionContextualRequiredTransactionIO {
  // A list of requirements that must be satisfied by the Transaction
  repeated Requirement requirements = 1;

  // A "match" description for a particular Box
  message Requirement {
    // The exact Box to match
    co.topl.proto.common.Box box = 1;
    // The Box's location within the Transaction
    BoxLocation location = 2;
  }
}

// Represents where a Box should exist within a Transaction
message BoxLocation {
  // The 0-based index of the input or output
  uint32 index = 1;
  // Either a Transaction.Input or a Transaction.Output
  IO location = 2;
  enum IO {
    INPUT = 0;
    OUTPUT = 1;
  }
}
