syntax = "proto3";

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

package co.topl.proto.genus;

import 'models/address.proto';
import 'models/block.proto';
import 'models/box.proto';
import 'models/common.proto';
import 'models/transaction.proto';
import 'genus/genus_models.proto';

// Operations related to blocks
service GenusFullBlockService {
  // Get a GenusBlock by its hash
  rpc getBlockById(models.BlockId) returns (models.FullBlock);

  // get a GenusBlock by its height
  rpc getBlockByHeight(ChainDistance) returns (models.FullBlock);

  // get a GenusBlock by its depth
  // Since blocks keep getting added, we expect that multiple calls to this with the same argument will return different blocks.
  rpc getBlockByDepth(ChainDistance) returns (models.FullBlock);
}

// Operations related to GenusBlock contents
service TransactionService {
  // Get a transaction by its ID
  // This returns the transaction when it is in the Genus database AND its confidence factor is at least the specified value.
  rpc getTransactionById(GetTransactionByIdRequest) returns (TransactionReceipt);

  // Get a stream of transactions that have an output associated with one of the specified addresses that have at least
  // the specified confidence factor.
  rpc getTransactionByAddressStream(QueryByAddressRequest) returns(stream TransactionReceipt);

  //rpc getTransactionByBloomFilter();

  // Get the boxes currently associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getBoxesByAddress(QueryByAddressRequest) returns(BoxQueryResponse);

  // Get a stream of boxes associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getBoxesByAddressStream(QueryByAddressRequest) returns(stream BoxQueryResponse);

  rpc getBoxesByAssetLabel(QueryByAssetLabelRequest) returns(BoxQueryResponse);

  /////////////////////////////////////////////////////////////////////////////
  //
  // The following RPCs are for managing database indexes on the data fields of
  // transactions.
  //
  // They also allow the indexes to be based on field values that are embedded
  // in the data. Two types of field organization are supported. One is data
  // that is a JSON object. The other is data that is character separated
  // fields.
  //
  /////////////////////////////////////////////////////////////////////////////

  // Create a transaction index using on-chain data.
  rpc createOnChainTransactionIndex(CreateOnChainTransactionIndexRequest) returns (RecordCount);

  // Get information about existing transaction indexes
  rpc getExistingTransactionIndexes(GetExistingTransactionIndexesRequest) returns (IndexDefs);

  // Drop an index
  rpc dropIndex(DropIndexRequest) returns (DropIndexResponse);

  // get transactions that are in a named index and match the given value.
  rpc getIndexedTransactions(GetIndexedTransactionsRequest) returns(stream TransactionReceipt);
}

// Used to request a transaction by specifying its ID.
message GetTransactionByIdRequest {
  models.TransactionId transactionId = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// Used to request boxes by their associated address
message QueryByAddressRequest {
  // All the addresses of interest
  repeated models.SpendingAddress addresses = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// User to request Box by their asset type
message QueryByAssetLabelRequest {
  AssetLabel assetLabel = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

message BoxQueryResponse {
  // Map addresses that are Base58 encoded to boxes.
  map<string, BoxStatuses> addressesToBoxes = 1;

  message BoxStatuses {
    repeated genus.BoxStatus boxStatus = 1;
  }
}

// A request to create an index of transactions based on their on-chain data
message CreateOnChainTransactionIndexRequest {
  IndexSpec indexSpec = 1;
}

// Definitions of existing database indexes.
message IndexDefs {
  repeated IndexDef indexDef = 1;
}

message IndexDef {
  oneof xdev {
      CreateOnChainTransactionIndexRequest onChain = 1;
  }
}

// The message that is sent when requesting information about the existing Genus indexes
message GetExistingTransactionIndexesRequest {

}

// Specify the name of an index to be dropped
message DropIndexRequest {
  string indexName = 1;
}

// Return true if the requested index was dropped or false if it was not (Most likely because it did not exist).
message DropIndexResponse {
    bool dropped = 1;
}

// Request the use of a named index to find transactions containing data that matches specified values.
message GetIndexedTransactionsRequest {
  // The name of the index to search
  string indexName = 1;

  // The index value(s) to search for.
  repeated IndexMatchValue value = 2;

  // The maximum number of transactions to be returned
  optional uint64 maxResults = 3;

  // A number of transactions to be skipped. This is useful for paging results.
  optional uint64 skipResults = 4;
}

// A value that may match a field in an index.
message IndexMatchValue {
  oneof value {
    string stringValue = 1;
    int64 intValue = 2;
    uint64 uintValue = 3;
  }
}

//service SubscriptionService {
//  rpc getAvailableMessageQueues(AvailableMessageQueueRequest) returns (AvailableMessageQueueResponse);
//}
