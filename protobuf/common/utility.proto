syntax = "proto3";

package co.topl.proto.common;

// #ProtoByteComment
// Protobuf does not support `byte` types, so we use uint32 instead

// A byte indicating a specific network
message NetworkPrefix {
  // See #ProtoByteComment
  uint32 value = 1;
}

// A type representing a Transaction Output's value, as well as its spending address evidence.
message Box {
  // The evidence of the Proposition which locks this Box
  TypedContractEvidence contract = 1;
  // The value inside of the Box
  TypedValueEvidence value = 2;

  // Represents an identifier or pointer to a Box
  message Id {
    TransactionId transactionId = 1;
    int32 transactionOutputIndex = 2;
  }
}

// A hash with a byte prefix indicating the data type of the original value
message TypedContractEvidence {
  // See #ProtoByteComment
  // A 1-byte discriminator of the original value type
  uint32 typePrefix = 1;
  // A blake2b256 32-byte hash of the original value
  bytes evidence = 2;
}

// A hash with a byte prefix indicating the data type of the original value
message TypedValueEvidence {
  // See #ProtoByteComment
  // A 1-byte discriminator of the original value type
  uint32 typePrefix = 1;
  // A blake2b256 32-byte hash of the original value
  bytes evidence = 2;
}

// An identifier of a Block
message BlockId {
  // A 32-byte blake2b256 hash
  bytes value = 1;
}

// An identifier of a Transaction
message TransactionId {
  // A 32-byte blake2b256 hash
  bytes value = 1;
}

// TODO: Does this representation need to change?
// Represents a 128-bit integer
message Int128 {
  // Java BigInt Representation: two's-complement, big-endian
  bytes value = 1;
}
