syntax = "proto3";

package co.topl.proto.user;

import "genus/genus_models.proto";
import "user/transaction_output.proto";
import "user/proposition.proto";
import "quivr/proposition.proto";
import "quivr/proof.proto";

// Additional Wallet information
// Each wallet in a DB is tied to a unique network that can be identified by
// the hash/ID of the network's BigBang block
// DB key: w.[Network ID]
message Wallet {
  // Strict: 128 bytes (UUID)
  bytes id = 1;
  // Human readable name for the wallet
  string name = 2;
  // Human readable description for the wallet
  optional string description = 3;
  // Mapping of human readable names to internal asset labels.
  map<string, co.topl.proto.genus.AssetLabel> assetAliases = 4;
  // Mapping of human readable names to X layer.
  map<string, uint32> xNames = 5;

  // The indices of the existing/exposed X entities within the wallet
  repeated uint32 xExposed = 6;
}

// Represents additional information associated to an entity
// at the x layer of the x/y/z cartesian scheme.
// DB key: x.[wallet.id].[X.idx]
message XInfo {
  // Human readable description of this X entity
  optional string description = 1;
  // Mapping of human readable names to Y layer.
  map<string, uint32> yNames = 2;
}

// Represents additional information associated to an entity
// at the y layer of the x/y/z cartesian scheme.
// DB key: y.[wallet.id].[X.idx].[Y.idx]
message YInfo {
  // Human readable description of this Y entity
  optional string description = 1;

  // The template used to create propositions for all indices in this layer
  PropositionTemplate propositionTemplate = 2;
}

// Represents additional information associated to an entity
// at the z layer of the x/y/z cartesian scheme
// DB key: z.[wallet.id].[X.idx].[Y.idx].[Z.idx]
message ZInfo {
  // Human readable description of this Z entity
  optional string description = 1;

  // The proposition used for this index
  co.topl.proto.quivr.Proposition proposition = 2;
  // The proof used for this index
  optional co.topl.proto.quivr.Proof proof = 3;

  // TxOs contained in this address
  repeated AssetTransactionOutput txOs = 4;
}

// Used to map 2 different views of the z layer of the x/y/z cartesian scheme
// This is to allow querying by an Address's FullAddress
// DB key: a.[wallet.id].[FullAddress]
message AddressMapping {
  // Denotes the X index that this address belongs to
  uint32 xIdx = 1;
  // Denotes the Y index that this address belongs to
  uint32 yIdx = 2;
  // Denotes the Z index that this address belongs to
  uint32 zIdx = 3;

  // Flag denoting if this address could have been exposed
  // outside of this application. Used for garbage collection
  bool exposed = 4;
}