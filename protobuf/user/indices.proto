// something where we can specify the types of ways to exchange indices between participants
syntax = "proto3";

package co.topl.proto.user;

// Represents a consecutive chunk of indices
message IndexChunk {
  // Inclusive. Range from 0 - (2^32)-1
  uint32 start = 1;
  // Exclusive. Range from 1 - 2^32
  // Must be at least 1 greater than start
  uint32 end = 2;
}

// Represents a set/grouping of index chunks
message IndexChunkSet {
  repeated IndexChunk chunks = 1;
}

// Represents an entity at the x layer of the x/y/z cartesian scheme
// Also known as "application" or "peer" or "party"
// DB key: i.[wallet.id].[X.idx]
message X {
  // The index of this x within the cartesian scheme
  uint32 xIdx = 1;
  // The chunks of xy-layer indices that are used (i.e has an assigned purpose) within this x layer
  repeated IndexChunk used = 2;
}

// Represents an xy pair in the x/y/z cartesian scheme
// Also known as "contract" or "account"
// DB key: i.[wallet.id].[X.idx].[Y.idx]
message XY {
  // The x index of this pair within the cartesian scheme
  uint32 xIdx = 1;
  // The y index of this pair within the cartesian scheme
  uint32 yIdx = 2;
  // The chunks of xyz-layer indices that are used/exposed (i.e associated address
  // exposed on the blockchain or revealed to another party) within this y layer
  repeated IndexChunk used = 3;
  // The xyz-layer index chunk sets that are proposed to be exposed within this y layer
  repeated IndexChunkSet proposed = 4;
}

// Represents an xyz triple in the x/y/z cartesian scheme
// Also known as "index" or "address"
// DB key: i.[wallet.id].[X.idx].[Y.idx].[Z.idx]
message XYZ {
  // The x index of this triple within the cartesian scheme
  uint32 xIdx = 1;
  // The y index of this triple within the cartesian scheme
  uint32 yIdx = 2;
  // The z index of this triple within the cartesian scheme
  uint32 zIdx = 3;
}