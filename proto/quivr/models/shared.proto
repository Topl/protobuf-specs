syntax = "proto3";

package quivr.models;

import "validate/validate.proto";
import "scalapb/scalapb.proto";
import "scalapb/validate.proto";

message Data {
    bytes value = 1;
}

message SmallData {
    // Maximum length = 64
    bytes value = 1 [(validate.rules).bytes.max_len = 64];
}

message Root {
    oneof value {
        bytes root32 = 1 [(validate.rules).bytes.len = 32];
        bytes root64 = 2 [(validate.rules).bytes.len = 64];
    }
}

message Preimage {
    bytes input = 1 [(validate.rules).bytes.max_len = 16384];
    bytes salt = 2 [(validate.rules).bytes.max_len = 16384];
}

message Digest {
    oneof value {
        Digest32 digest32 = 1;
        Digest64 digest64 = 2;
    }

    message Digest32 {
        // strict length = 32
        bytes value = 1 [(validate.rules).bytes.len = 32];
    }

    message Digest64 {
        // strict length = 64
        bytes value = 1 [(validate.rules).bytes.len = 64];
    }
}

message DigestVerification {
    Digest digest = 1 [(validate.rules).message.required = true];
    Preimage preimage = 2 [(validate.rules).message.required = true];
}

message VerificationKey {
    bytes value = 1 [(validate.rules).bytes.len = 32];
}

message SigningKey {
    bytes value = 1 [(validate.rules).bytes.len = 32];
}

message KeyPair{
    VerificationKey vk = 1 [(validate.rules).message.required = true];
    SigningKey sk = 2 [(validate.rules).message.required = true];
}

message Message {
    bytes value = 1; // ask if we need len or max len rule
}

message Witness {
    bytes value = 1 [(validate.rules).bytes.len = 32];
}

message SignatureVerification {
    VerificationKey verificationKey = 1 [(validate.rules).message.required = true];
    Witness signature = 2 [(validate.rules).message.required = true];
    Message message = 3 [(validate.rules).message.required = true];
}

message SignableBytes {
    bytes value = 1;
}

message TxBind {
    bytes value = 2 [(validate.rules).bytes.len = 32];
}

// Represents a 128-bit integer
message Int128 {
    // Java BigInt Representation: two's-complement, big-endian
    bytes value = 1 [(validate.rules).bytes.max_len = 16];
}

option (scalapb.options) = {
    [scalapb.validate.file] {
        validate_at_construction: true
    }
    field_transformations: [
        {
            when: {options: {[validate.rules] {message: {required: true}}}}
            set: {
                [scalapb.field] {
                    required: true
                }
            }
        }
    ]
};
