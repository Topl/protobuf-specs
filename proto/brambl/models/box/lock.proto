syntax = "proto3";

package co.topl.brambl.models.box;


import 'brambl/models/identifier.proto';
import 'quivr/models/proposition.proto';

// should be able to calculate or retrieve the root of the Lock
// - from Predicate -> Image -> Commitment
// - from Image -> Commitment
// - from Commitment -> _.root
message Lock {
    oneof value {
        Predicate predicate = 1;
        Image32 image32 = 2;
        Image64 image64 = 3;
        Commitment32 commitment32 = 4;
        Commitment64 commitment64 = 5;
    }

    // Predicate -> Image -> Commitment -> Signable -> Evidence -> Identifier -> Address -> Reference

    // Private information
    message Predicate {
        // this should probably be a non-empty chain, but how to enforce across other languages?
        repeated quivr.models.Proposition challenges = 1;
        uint32 threshold = 2;
    }
    
    // Semi-public information
    // The most commonly shared construction between parties
    message Image32 {
        repeated co.topl.brambl.models.Identifier.Lock32 leaves = 1;
        uint32 threshold = 2;
    }
    message Image64 {
        repeated co.topl.brambl.models.Identifier.Lock64 leaves = 1;
        uint32 threshold = 2;
    }

    // Public information
    // Predicate Commitments are used to encumber boxes
    // use a Root here so we can provide a membership proof of the conditions
    message Commitment32 {
        co.topl.brambl.models.Identifier.AccumulatorRoot32 root = 1;
        uint32 threshold = 2;
    }
    message Commitment64 {
        co.topl.brambl.models.Identifier.AccumulatorRoot64 root = 1;
        uint32 threshold = 2;
    }
}