syntax = "proto3";

package co.topl.brambl.models.box;

import 'validate/validate.proto';

import 'quivr/models/shared.proto';
import 'consensus/models/staking.proto';
import 'brambl/models/identifier.proto';
import 'brambl/models/box/asset.proto';

// The value contained in a box
message Value {
  oneof value {
    LVL lvl = 1;
    TOPL topl = 2;
    Asset asset = 3;
    Group group = 4;
  }
  // A payment token
  message LVL {
    quivr.models.Int128 quantity = 1 [(validate.rules).message.required = true];
  }
  // A staking token
  message TOPL {
    quivr.models.Int128 quantity = 1 [(validate.rules).message.required = true];
    // Optional.  If provided, the registration will take effect at the start of 2 epochs from now. If not provided, this token will not be used for staking purposes.
    co.topl.consensus.models.StakingRegistration registration = 3;

  }
  // A user-defined token
  message Asset {
    string label = 1;
    quivr.models.Int128 quantity = 2 [(validate.rules).message.required = true];
    quivr.models.SmallData metadata = 3 [(validate.rules).message.required = true];
  }

  // A group constructor token
  message Group {
    // Identifies the group policy for humans (do not confuse with the actual group identifier)
    string label = 1;
    // An optional series identifier. When this series identifier is defined, this groups that implement this policy can only be used to mint assets with the aforementioned series identifier
    FixedSeries fixedSeries = 2;
    // Descriptor of how many series can be associated with this group
    SeriesTokenSupply seriesTokenSupply = 3 [(validate.rules).message.required = true];
    // transaction id
    TransactionId txId = 5 [(validate.rules).message.required = true];
    // index of the output (UTXO) within the transaction targeted by id.
    uint32 index = 4;
    // group identifier, hash of (label + fixedSeries + seriesTokenSupply + txId + index)
    string id = 6;
  }

}
