syntax = "proto3";

package co.topl.brambl.models.box;

import 'validate/validate.proto';

import 'brambl/models/box/lock.proto';
import 'brambl/models/box/challenge.proto';
import 'quivr/models/proof.proto';
import 'quivr/models/shared.proto';

// encapsulates the lock and responses are used to satisfy locks (may be successful or unsuccessful)
message Attestation {
    oneof value {
        Predicate predicate = 1;
        Image image = 2;
        Commitment commitment = 3;
    }

    message Predicate {
        co.topl.brambl.models.box.Lock.Predicate lock = 1 [(validate.rules).message.required = true];
        // list of optional values (proofs used to attempt to satisfy the challenges contained in the predicate lock)
        repeated quivr.models.Proof responses = 2;
    }
    message Image {
        co.topl.brambl.models.box.Lock.Image lock = 1 [(validate.rules).message.required = true];
        // list of optional values
        repeated Challenge known = 2;
        // list of optional values
        repeated quivr.models.Proof responses = 3;
    }
    message Commitment {
        co.topl.brambl.models.box.Lock.Commitment lock = 1 [(validate.rules).message.required = true];
        // list of claim propositions that must be proven as memebrs of the root commitment and be suitably satisfied by the given proofs
        repeated Challenge known = 2;
        // list of witnesses for proving membership of claimed propositions
        repeated quivr.models.Witness witness = 3;
        // list of optional values
        repeated quivr.models.Proof responses = 4;
    }
    
}
