syntax = "proto3";

package co.topl.brambl.models;

import 'validate/validate.proto';
import 'scalapb/scalapb.proto';
import 'scalapb/validate.proto';

import 'quivr/models/shared.proto';
import 'brambl/models/known_identifier.proto';
// import 'brambl/models/known_reference.proto'; // TODO: cyclical import
import 'brambl/models/transaction/schedule.proto';

// Events are uniquely identifiable occurrences of state mutations within the blockchain protocol.
// Each event is associated with certain data that may be updated every tick.
message Event {
    oneof value {
        Eon eon = 1;
        Era era = 2;
        Epoch epoch = 3;
        Header header = 4;
        IoTransaction ioTransaction = 5;
        SpentTransactionOutput spentTransactionOutput = 6;
        UnspentTransactionOutput unspentTransactionOutput = 7;
        Root root = 8;
    }

    message Eon {
        uint64 beginSlot = 1;
        uint64 height = 2;
    }

    message Era {
        uint64 beginSlot = 1;
        uint64 height = 2;
    }

    message Epoch {
        uint64 beginSlot = 1;
        uint64 height = 2;
    }

    message Header {
        uint64 height = 1;
    }

    message IoTransaction {
        co.topl.brambl.models.transaction.Schedule schedule = 1 [(validate.rules).message.required = true];
        repeated KnownIdentifier.TransactionOutput32 references32 = 2; // optional list of references
        repeated KnownIdentifier.TransactionOutput64 references64 = 3; // optional list of references
        quivr.models.SmallData metadata = 4 [(validate.rules).message.required = true];
    }

    message SpentTransactionOutput {
        quivr.models.SmallData metadata = 1 [(validate.rules).message.required = true];
    }

    message UnspentTransactionOutput {
        quivr.models.SmallData metadata = 1 [(validate.rules).message.required = true];
    }

    message Root {
        quivr.models.Root value = 1 [(validate.rules).message.required = true];
    }
}

option (scalapb.options) = {
    [scalapb.validate.file] {
        validate_at_construction: true
    }
    field_transformations: [
        {
            when: {options: {[validate.rules] {message: {required: true}}}}
            set: {
                [scalapb.field] {
                    required: true
                }
            }
        }
    ]
};